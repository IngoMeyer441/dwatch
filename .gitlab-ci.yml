stages:
- check
- build
- deploy
- deploy-to-aur

pre-commit:
  stage: check
  image: python:3
  before_script:
  - pip install "pre-commit==3.3.2"
  script:
  - TMP_MSG_FILE="$(mktemp)"
  - git log -1 --pretty=%B > "${TMP_MSG_FILE}"
  - pre-commit run
      --all-files
      --color=always
      --show-diff-on-failure
      --hook-stage commit &&
    pre-commit run
      --all-files
      --color=always
      --show-diff-on-failure
      --hook-stage commit-msg
      --commit-msg-filename "${TMP_MSG_FILE}" &&
    pre-commit run
      --all-files
      --color=always
      --show-diff-on-failure
      --hook-stage post-commit ||
    {
      >&2 echo "pre-commit checks failed. Please consider installing pre-commit";
      >&2 echo "hooks in your local Git clone by running \`make git-hooks-install\`.";
      exit 1;
    }

build-linux-executable:
  stage: build
  image: rockylinux:8
  before_script:
  - dnf install -y epel-release
  - dnf install -y python39-pip upx
  script:
  - python3 setup.py bdist_pyinstaller
  - PLATFORM=$(python3 -c 'import platform; print("{}_{}".format(platform.system(), platform.machine()).lower())');
    mv "dist/${CI_PROJECT_NAME}" "dist/${CI_PROJECT_NAME}_${PLATFORM}"
  artifacts:
    expire_in: 1 week
    paths:
    - dist/

build-macos-x64-executable:
  stage: build
  image: macos:catalina-xcode
  variables:
    PYTHON_VERSION: "3.13.2"
  tags:
  - libvirt
  before_script:
  - curl -fLO "https://www.python.org/ftp/python/${PYTHON_VERSION}/python-${PYTHON_VERSION}-macos11.pkg"
  - sudo installer -pkg "python-${PYTHON_VERSION}-macos11.pkg" -target /
  - python3 -m pip install -U
      pip
      setuptools
      wheel
  script:
  - python3 setup.py bdist_pyinstaller
  - PLATFORM=$(python3 -c 'import platform; print("{}_{}".format(platform.system(), platform.machine()).lower())');
    mv "dist/${CI_PROJECT_NAME}" "dist/${CI_PROJECT_NAME}_${PLATFORM}"
  artifacts:
    expire_in: 1 week
    paths:
    - dist/

build-macos-arm64-executable:
  stage: build
  image: macos:sonoma-xcode
  variables:
    PYTHON_VERSION: "3.13.2"
  tags:
  - utm
  before_script:
  - curl -fLO "https://www.python.org/ftp/python/${PYTHON_VERSION}/python-${PYTHON_VERSION}-macos11.pkg"
  - sudo installer -pkg "python-${PYTHON_VERSION}-macos11.pkg" -target /
  - python3 -m pip install -U
      pip
      setuptools
      wheel
  script:
  - python3 setup.py bdist_pyinstaller
  - PLATFORM=$(python3 -c 'import platform; print("{}_{}".format(platform.system(), platform.machine()).lower())');
    mv "dist/${CI_PROJECT_NAME}" "dist/${CI_PROJECT_NAME}_${PLATFORM}"
  artifacts:
    expire_in: 1 week
    paths:
    - dist/

pages:
  stage: deploy
  image: alpine:latest
  script:
  - mkdir -p public
  - cp -v "dist/${CI_PROJECT_NAME}_linux_x86_64" public/
  - cp -v "dist/${CI_PROJECT_NAME}_darwin_x86_64" public/
  - cp -v "dist/${CI_PROJECT_NAME}_darwin_arm64" public/
  - echo "Self-contained executables can be downloaded from";
    echo "- ${CI_PAGES_URL}/${CI_PROJECT_NAME}_linux_x86_64";
    echo "- ${CI_PAGES_URL}/${CI_PROJECT_NAME}_darwin_x86_64";
    echo "- ${CI_PAGES_URL}/${CI_PROJECT_NAME}_darwin_arm64"
  artifacts:
    paths:
    - public
  only:
  - master@imeyer/dwatch

deploy-to-github:
  stage: deploy
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/deploy
  variables:
    GIT_STRATEGY: none
  only:
  - master@imeyer/dwatch
  - develop@imeyer/dwatch
  - tags@imeyer/dwatch
  script:
  - mkdir --mode=700 ~/.ssh/
  - (umask 0377 && echo "${GITHUB_DEPLOY_KEY}" > ~/.ssh/id_rsa
                && echo "github.com ${GITHUB_HOST_KEY}" >> ~/.ssh/known_hosts)
  - git clone --mirror "${CI_REPOSITORY_URL}" "${CI_PROJECT_NAME}_mirror"
  - cd "${CI_PROJECT_NAME}_mirror";
    git push --mirror "git@github.com:IngoMeyer441/${CI_PROJECT_NAME}.git";
    cd ..
  - if echo "${CI_COMMIT_TAG}" | grep -Eq '^v[0-9]+\.[0-9]+\.[0-9]+$'; then
      python3 -m pip install
      "git+https://gitlab-ci-token:${CI_JOB_TOKEN}@iffgit.fz-juelich.de/Scientific-IT-Systems/github-binary-upload.git";
      echo "${GITHUB_ACCESS_TOKEN}" |
        github-binary-upload --user IngoMeyer441 "IngoMeyer441/${CI_PROJECT_NAME}" "${CI_COMMIT_TAG}" dist/*;
    fi

deploy-to-pypi:
  stage: deploy
  image: python:3-slim
  only:
  - tags@imeyer/dwatch
  script:
  - pip install twine
  - echo "[distutils]"                    > ~/.pypirc;
    echo "index-servers ="               >> ~/.pypirc;
    echo "    pypi"                      >> ~/.pypirc;
    echo "[pypi]"                        >> ~/.pypirc;
    echo "username = __token__"          >> ~/.pypirc;
    echo "password = ${PYPI_DEPLOY_KEY}" >> ~/.pypirc;
  - pip install build twine
  - python -m build
  - python -m twine upload dist/*.tar.gz dist/*.whl

deploy-to-aur:
  stage: deploy-to-aur
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  only:
  - tags@imeyer/dwatch
  script:
  - mkdir --mode=700 ~/.ssh/
  - (umask 0377 && echo "$AUR_PRIVATE_KEY" > ~/.ssh/id_rsa
                && echo "aur.archlinux.org $AUR_HOST_KEY" >> ~/.ssh/known_hosts)
  - git clone "ssh://aur@aur.archlinux.org/${CI_PROJECT_NAME}.git" "${CI_PROJECT_NAME}-aur"
  - cd "${CI_PROJECT_NAME}-aur"
  - sed -i -e "/^pkgver=/c\pkgver=\"${CI_COMMIT_TAG#v}\"" -e "/^pkgrel=/c\pkgrel=\"1\"" PKGBUILD
  - (
      source PKGBUILD;
      curl -o source -L "${source[0]}";
      SHA256SUM="$(sha256sum source | awk '{ print $1 }')";
      sed -i "/^sha256sums=/c\sha256sums=(\"${SHA256SUM}\")" PKGBUILD;
    )
  - makepkg --printsrcinfo > .SRCINFO
  - git commit -a -m "Update to version ${CI_COMMIT_TAG#v}"
  - git push
